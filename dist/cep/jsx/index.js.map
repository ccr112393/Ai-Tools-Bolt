{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/ilst/ilst.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\r\nimport { version } from \"./package.json\";\r\n\r\nconst config: CEP_Config = {\r\n  version,\r\n  id: \"com.aitools-bolt.cep\",\r\n  displayName: \"Ai Tools Bolt\",\r\n  symlink: \"local\",\r\n  port: 3000,\r\n  servePort: 5000,\r\n  startingDebugPort: 8860,\r\n  extensionManifestVersion: 6.0,\r\n  requiredRuntimeVersion: 9.0,\r\n  hosts: [{ name: \"ILST\", version: \"[0.0,99.9]\" }],\r\n  type: \"Panel\",\r\n  iconDarkNormal: \"./src/assets/light-icon.png\",\r\n  iconNormal: \"./src/assets/dark-icon.png\",\r\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\r\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\r\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\r\n  width: 375,\r\n  height: 650,\r\n  minWidth: 300,\r\n  minHeight: 400,\r\n  maxWidth: 800,\r\n  maxHeight: 1000,\r\n\r\n  panels: [\r\n    {\r\n      mainPath: \"./main/index.html\",\r\n      name: \"main\",\r\n      panelDisplayName: \"Ai Tools Bolt\",\r\n      autoVisible: true,\r\n    },\r\n  ],\r\n  build: {\r\n    jsxBin: \"off\",\r\n    sourceMap: true,\r\n  },\r\n  zxp: {\r\n    country: \"US\",\r\n    province: \"NC\",\r\n    org: \"crdev\",\r\n    password: \"ColorCharlotte2020\",\r\n    tsa: \"http://timestamp.digicert.com/\",\r\n    sourceMap: false,\r\n    jsxBin: \"off\",\r\n  },\r\n  installModules: [],\r\n  copyAssets: [],\r\n  copyZipAssets: [],\r\n};\r\nexport default config;\r\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\n","export const currentDocument = (): Document => {\r\n  return app.activeDocument;\r\n};\r\nexport const openDocuments = (): Documents => {\r\n  return app.documents;\r\n};\r\n\r\nexport const getCurrentLayer = (): Layer => {\r\n  return app.activeDocument.activeLayer as Layer;\r\n};\r\n\r\nexport const getDocumentWidth = (): number => {\r\n  return currentDocument().width;\r\n};\r\n\r\nexport const getDocumentHeight = (): number => {\r\n  return currentDocument().height;\r\n};\r\n\r\nexport const convertToPoints = (value: number, unit: string): number => {\r\n  var unitValue = UnitValue(`${value} ${unit}`);\r\n  unitValue.convert(\"pt\");\r\n  return unitValue.value;\r\n};\r\n\r\nexport function setDocumentColorSpaceRGB() {\r\n  app.executeMenuCommand(\"doc-color-rgb\");\r\n}\r\n\r\nexport function setDocumentColorSpaceCMYK() {\r\n  app.executeMenuCommand(\"doc-color-cmyk\");\r\n}\r\n\r\nexport const createColorCMYK = (\r\n  cyan: number,\r\n  magenta: number,\r\n  yellow: number,\r\n  black: number\r\n): Color => {\r\n  var color = new CMYKColor();\r\n  color.cyan = cyan;\r\n  color.magenta = magenta;\r\n  color.yellow = yellow;\r\n  color.black = black;\r\n  return color;\r\n};\r\n\r\nexport const createLayer = (name: string): Layer => {\r\n  var layer = currentDocument().layers.add();\r\n  layer.name = name;\r\n  return layer;\r\n};\r\n\r\nexport const getLayerByName = (name: string): Layer | undefined => {\r\n  var layers = currentDocument().layers;\r\n  for (let index = 0; index < layers.length; index++) {\r\n    const layer = layers[index];\r\n    if (layer.name === name) {\r\n      return layer;\r\n    }\r\n  }\r\n};\r\n\r\nexport function drawEllipse(\r\n  layer: Layer,\r\n  y: number,\r\n  x: number,\r\n  diameter: number,\r\n  fillColor?: Color,\r\n  strokeColor?: Color,\r\n  strokeWidth?: number\r\n) {\r\n  var ellipse = layer.pathItems.ellipse(y, x, diameter, diameter);\r\n  fillColor && (ellipse.fillColor = fillColor);\r\n  strokeColor && (ellipse.strokeColor = strokeColor);\r\n  strokeWidth && (ellipse.strokeWidth = strokeWidth);\r\n  return ellipse;\r\n}\r\n\r\nexport function renameLayers(search: string, replace: string): number {\r\n  var count = 0;\r\n  var layers = currentDocument().layers;\r\n  for (let index = 0; index < layers.length; index++) {\r\n    const layer = layers[index];\r\n    if (layer.name.indexOf(search) !== -1) {\r\n      layer.name = layer.name.replace(search, replace);\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport function renamePathItems(search: string, replace: string): number {\r\n  var count = 0;\r\n  var items = currentDocument().pathItems;\r\n  for (let index = 0; index < items.length; index++) {\r\n    if (items[index].name.indexOf(search) !== -1) {\r\n      items[index].name = items[index].name.replace(search, replace);\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport function renameSelection(search: string, replace: string): number {\r\n  var count = 0;\r\n  var items = currentDocument().selection;\r\n  for (let index = 0; index < items.length; index++) {\r\n    if (items[index].name.indexOf(search) !== -1) {\r\n      items[index].name = items[index].name.replace(search, replace);\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport function renameSelectedLayers(search: string, replace: string): number {\r\n  var count = 0;\r\n  var items = currentDocument().selection;\r\n  for (let index = 0; index < items.length; index++) {\r\n    if (\r\n      items[index].name.indexOf(search) !== -1 &&\r\n      items[index].typename === \"Layer\"\r\n    ) {\r\n      items[index].name = items[index].name.replace(search, replace);\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport function renameSelectedPaths(search: string, replace: string): number {\r\n  var count = 0;\r\n  var items = currentDocument().selection;\r\n  for (let index = 0; index < items.length; index++) {\r\n    if (\r\n      items[index].name.indexOf(search) !== -1 &&\r\n      items[index].typename !== \"Layer\"\r\n    ) {\r\n      items[index].name = items[index].name.replace(search, replace);\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport function addRegistration(\r\n  layerName: string,\r\n  unit: string,\r\n  diameter: number,\r\n  edgeOffset: number,\r\n  marksPrimary: boolean,\r\n  marksOrientation: boolean,\r\n  marksOrientationLocation: string,\r\n  marksCenter: boolean,\r\n  marksDistance: boolean,\r\n  marksDistanceValue: number\r\n) {\r\n  try {\r\n    const doc = currentDocument();\r\n    const docWidth = doc.width;\r\n    const docHeight = doc.height;\r\n    const colorRegistration = createColorCMYK(0, 0, 0, 100);\r\n    const layer = getLayerByName(layerName) || createLayer(layerName);\r\n    const diameterPoints = convertToPoints(diameter, unit as UnitName);\r\n    const halfDiameter = diameterPoints / 2;\r\n    const edgeOffsetPoints = convertToPoints(edgeOffset, unit as UnitName);\r\n    const marksDistancePoints = convertToPoints(\r\n      marksDistanceValue,\r\n      unit as UnitName\r\n    );\r\n\r\n    doc.rulerOrigin = [0, 0];\r\n\r\n    var coordinates: number[][] = [];\r\n\r\n    if (marksPrimary) {\r\n      const coordinatesPrimary: number[][] = [\r\n        // [ Y, X ]\r\n        [edgeOffsetPoints + halfDiameter, edgeOffsetPoints - halfDiameter], // Bottom Left\r\n        [\r\n          docHeight - edgeOffsetPoints + halfDiameter,\r\n          edgeOffsetPoints - halfDiameter,\r\n        ], // Top Left\r\n        [\r\n          edgeOffsetPoints + halfDiameter,\r\n          docWidth - edgeOffsetPoints - halfDiameter,\r\n        ], // Bottom Right\r\n        [\r\n          docHeight - edgeOffsetPoints + halfDiameter,\r\n          docWidth - edgeOffsetPoints - halfDiameter,\r\n        ], // Top Right\r\n      ];\r\n      coordinates.push(...coordinatesPrimary);\r\n    }\r\n\r\n    if (marksOrientation) {\r\n      const coordinatesOrientation: number[][] = [];\r\n      const gap = 144;\r\n      switch (marksOrientationLocation) {\r\n        case \"bottom-left\":\r\n          coordinatesOrientation.push([\r\n            edgeOffsetPoints + halfDiameter + gap,\r\n            edgeOffsetPoints - halfDiameter,\r\n          ]);\r\n          coordinatesOrientation.push([\r\n            edgeOffsetPoints + halfDiameter,\r\n            edgeOffsetPoints - halfDiameter + gap,\r\n          ]);\r\n          break;\r\n        case \"bottom-right\":\r\n          coordinatesOrientation.push([\r\n            edgeOffsetPoints + halfDiameter + gap,\r\n            docWidth - edgeOffsetPoints - halfDiameter,\r\n          ]);\r\n          coordinatesOrientation.push([\r\n            edgeOffsetPoints + halfDiameter,\r\n            docWidth - edgeOffsetPoints - halfDiameter - gap,\r\n          ]);\r\n          break;\r\n        case \"top-right\":\r\n          coordinatesOrientation.push([\r\n            docHeight - edgeOffsetPoints + halfDiameter - gap,\r\n            docWidth - edgeOffsetPoints - halfDiameter,\r\n          ]);\r\n          coordinatesOrientation.push([\r\n            docHeight - edgeOffsetPoints + halfDiameter,\r\n            docWidth - edgeOffsetPoints - halfDiameter - gap,\r\n          ]);\r\n          break;\r\n        case \"top-left\":\r\n        default:\r\n          coordinatesOrientation.push([\r\n            docHeight - edgeOffsetPoints + halfDiameter - gap,\r\n            edgeOffsetPoints - halfDiameter,\r\n          ]);\r\n          coordinatesOrientation.push([\r\n            docHeight - edgeOffsetPoints + halfDiameter,\r\n            edgeOffsetPoints - halfDiameter + gap,\r\n          ]);\r\n          break;\r\n      }\r\n\r\n      coordinates.push(...coordinatesOrientation);\r\n    }\r\n\r\n    if (marksCenter) {\r\n      const coordinatesCenter: number[][] = [\r\n        [\r\n          docHeight - edgeOffsetPoints + halfDiameter,\r\n          docWidth / 2 - halfDiameter,\r\n        ], // Top Edge\r\n        [edgeOffsetPoints + halfDiameter, docWidth / 2 - halfDiameter], // Bottom Edge\r\n        [docHeight / 2 + halfDiameter, edgeOffsetPoints - halfDiameter], // Left Edge\r\n        [\r\n          docHeight / 2 + halfDiameter,\r\n          docWidth - edgeOffsetPoints - halfDiameter,\r\n        ], // Right Edge\r\n      ];\r\n      coordinates.push(...coordinatesCenter);\r\n    }\r\n\r\n    if (marksDistance) {\r\n      const coordinatesDistance: number[][] = [];\r\n\r\n      // Bottom Row\r\n      // Initial Coordinates (Bottom Left)\r\n      var coordY = edgeOffsetPoints + halfDiameter;\r\n      var coordX = edgeOffsetPoints - halfDiameter + marksDistancePoints;\r\n      while (coordX < docWidth - edgeOffsetPoints - halfDiameter) {\r\n        coordinatesDistance.push([coordY, coordX]);\r\n        coordX += marksDistancePoints;\r\n      }\r\n\r\n      // Top Row\r\n      // Initial Coordinates (Top Left)\r\n      coordY = docHeight - edgeOffsetPoints + halfDiameter;\r\n      coordX = edgeOffsetPoints - halfDiameter + marksDistancePoints;\r\n      while (coordX < docWidth - edgeOffsetPoints - halfDiameter) {\r\n        coordinatesDistance.push([coordY, coordX]);\r\n        coordX += marksDistancePoints;\r\n      }\r\n\r\n      // Left Column\r\n      // Initial Coordinates (Bottom Left)\r\n      coordY = edgeOffsetPoints + halfDiameter + marksDistancePoints;\r\n      coordX = edgeOffsetPoints - halfDiameter;\r\n      while (coordY < docHeight - edgeOffsetPoints - halfDiameter) {\r\n        coordinatesDistance.push([coordY, coordX]);\r\n        coordY += marksDistancePoints;\r\n      }\r\n\r\n      // Right Column\r\n      // Initial Coordinates (Bottom Right)\r\n      coordY = edgeOffsetPoints + halfDiameter + marksDistancePoints;\r\n      coordX = docWidth - edgeOffsetPoints - halfDiameter;\r\n      while (coordY < docHeight - edgeOffsetPoints - halfDiameter) {\r\n        coordinatesDistance.push([coordY, coordX]);\r\n        coordY += marksDistancePoints;\r\n      }\r\n\r\n      coordinates.push(...coordinatesDistance);\r\n    }\r\n\r\n    // Draw each Ellipse from Coordinates\r\n    for (let index = 0; index < coordinates.length; index++) {\r\n      const y = coordinates[index][0];\r\n      const x = coordinates[index][1];\r\n      drawEllipse(layer, y, x, diameterPoints, colorRegistration);\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n","// @include './lib/json2.js'\r\n\r\nimport { ns } from \"../shared/shared\";\r\n\r\nimport * as ilst from \"./ilst/ilst\";\r\n\r\n//@ts-ignore\r\nconst host = typeof $ !== \"undefined\" ? $ : window;\r\n\r\n// A safe way to get the app name since some versions of Adobe Apps broken BridgeTalk in various places (e.g. After Effects 24-25)\r\n// in that case we have to do various checks per app to deterimine the app name\r\n\r\nconst getAppNameSafely = (): ApplicationName | \"unknown\" => {\r\n  const compare = (a: string, b: string) => {\r\n    return a.toLowerCase().indexOf(b.toLowerCase()) > -1;\r\n  };\r\n  const exists = (a: any) => typeof a !== \"undefined\";\r\n  const isBridgeTalkWorking =\r\n    typeof BridgeTalk !== \"undefined\" &&\r\n    typeof BridgeTalk.appName !== \"undefined\";\r\n\r\n  if (isBridgeTalkWorking) {\r\n    return BridgeTalk.appName;\r\n  } else if (app) {\r\n    //@ts-ignore\r\n    if (exists(app.name)) {\r\n      //@ts-ignore\r\n      const name: string = app.name;\r\n      if (compare(name, \"photoshop\")) return \"photoshop\";\r\n      if (compare(name, \"illustrator\")) return \"illustrator\";\r\n      if (compare(name, \"audition\")) return \"audition\";\r\n      if (compare(name, \"bridge\")) return \"bridge\";\r\n      if (compare(name, \"indesign\")) return \"indesign\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.appName)) {\r\n      //@ts-ignore\r\n      const appName: string = app.appName;\r\n      if (compare(appName, \"after effects\")) return \"aftereffects\";\r\n      if (compare(appName, \"animate\")) return \"animate\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.path)) {\r\n      //@ts-ignore\r\n      const path = app.path;\r\n      if (compare(path, \"premiere\")) return \"premierepro\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.getEncoderHost) && exists(AMEFrontendEvent)) {\r\n      return \"ame\";\r\n    }\r\n  }\r\n  return \"unknown\";\r\n};\r\n\r\nswitch (getAppNameSafely()) {\r\n  case \"illustrator\":\r\n  case \"illustratorbeta\":\r\n    host[ns] = ilst;\r\n    break;\r\n}\r\n\r\nexport type Scripts = typeof ilst\r\n\r\n// https://extendscript.docsforadobe.dev/interapplication-communication/bridgetalk-class.html?highlight=bridgetalk#appname\r\ntype ApplicationName =\r\n  | \"aftereffects\"\r\n  | \"aftereffectsbeta\"\r\n  | \"ame\"\r\n  | \"amebeta\"\r\n  | \"audition\"\r\n  | \"auditionbeta\"\r\n  | \"animate\"\r\n  | \"animatebeta\"\r\n  | \"bridge\"\r\n  | \"bridgebeta\"\r\n  // | \"flash\"\r\n  | \"illustrator\"\r\n  | \"illustratorbeta\"\r\n  | \"indesign\"\r\n  | \"indesignbeta\"\r\n  // | \"indesignserver\"\r\n  | \"photoshop\"\r\n  | \"photoshopbeta\"\r\n  | \"premierepro\"\r\n  | \"premiereprobeta\";\r\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","minWidth","minHeight","maxWidth","maxHeight","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyAssets","copyZipAssets","unitValue","app","fillColor","strokeColor","strokeWidth","layer","count","items","doc","coordinatesOrientation","coordX","coordY","host"],"mappings":";;AAGA;AACEA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAAUC;AAAcV;AAAsB;AAC9CW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEIC;AACAd;AACAe;AACAC;AACF;AAEFC;AACEC;AACAC;;AAEFC;AACEC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEFQ;AACAC;AACAC;AACF;;AClDA;;ACDA;;AAEA;AACA;;AAEA;AAEA;AACE;AACF;AAEA;AACE;AACF;AAEA;AACE;AACF;AAEA;AACE;AACAC;;AAEF;AAEA;AACEC;AACF;AAEA;AACEA;AACF;AAEA;AAME;;;;;AAKA;AACF;AAEA;;;AAGE;AACF;AAEA;AACE;AACA;AACE;AACA;AACE;AACF;AACF;AACF;AAEA;AASE;AACAC;AACAC;AACAC;AACA;AACF;AAEA;;AAEE;AACA;AACE;;AAEEC;AACAC;AACF;AACF;AACA;AACF;AAEA;;AAEE;AACA;AACE;AACEC;AACAD;AACF;AACF;AACA;AACF;AAEA;;AAEE;AACA;AACE;AACEC;AACAD;AACF;AACF;AACA;AACF;AAEA;;AAEE;AACA;;AAKIC;AACAD;AACF;AACF;AACA;AACF;AAEA;;AAEE;AACA;;AAKIC;AACAD;AACF;AACF;AACA;AACF;AAEA;;AAaI;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAKAE;;AAIA;AACE;AACE;AACA;AAAoE;;AAIjE;;AAIA;AACH;;;AAMJ;AAEA;;;AAGE;AACE;AACEC;AAIAA;AAIA;AACF;AACEA;AAIAA;AAIA;AACF;AACEA;AAIAA;AAIA;AACF;AACA;AACEA;AAIAA;AAIA;AACJ;;AAGF;AAEA;AACE;AAIK;;AAC6D;;AACC;AACjE;;;AAMJ;AAEA;;;AAGE;AACA;AACA;AACA;AACA;;AAEEC;AACF;;AAEA;AACA;AACAC;AACAD;AACA;;AAEEA;AACF;;AAEA;AACA;AACAC;;AAEA;;AAEEA;AACF;;AAEA;AACA;AACAA;AACAD;AACA;;AAEEC;AACF;;AAGF;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACF;AACF;;;;;;;;;;;;;;;;;;;;;;;;ACnTA;;AAEA;AACA;;AAEA;;AAEI;;AAEF;;AAAmD;AACnD;AAIA;;;AAGE;AACA;AACE;AACA;;;;;;AAMF;AACA;AACA;AACE;AACA;;;AAGF;AACA;AACA;AACE;AACA;;AAEF;AACA;;AAEE;AACF;AACF;AACA;AACF;AAEA;AACE;AACA;AACEC;AACA;AACJ;;AAIA"}