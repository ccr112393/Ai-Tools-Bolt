{
  "version": 3,
  "sources": ["../../@react-spectrum/accordion/dist/packages/@adobe/spectrum-css-temp/components/accordion/vars.css", "../../@react-spectrum/accordion/dist/packages/@react-spectrum/accordion/src/Accordion.tsx"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, StyleProps} from '@react-types/shared';\nimport {Button, UNSTABLE_DisclosureGroup as DisclosureGroup, DisclosureGroupProps, DisclosurePanelProps, DisclosureProps, Heading, UNSTABLE_Disclosure as RACDisclosure, UNSTABLE_DisclosurePanel as RACDisclosurePanel} from 'react-aria-components';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport React, {forwardRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/accordion/vars.css';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nexport interface SpectrumAccordionProps extends Omit<DisclosureGroupProps, 'className' | 'style' | 'children'>, StyleProps, DOMProps {\n  /** The disclosures within the accordion group. */\n  children: React.ReactNode\n}\n\nfunction Accordion(props: SpectrumAccordionProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <DisclosureGroup\n      {...props}\n      {...styleProps}\n      ref={domRef}\n      className={classNames(styles, 'spectrum-Accordion', styleProps.className)}>\n      {props.children}\n    </DisclosureGroup>\n  );\n}\n\nexport interface SpectrumDisclosureProps extends Omit<DisclosureProps, 'className' | 'style' | 'children'>, AriaLabelingProps  {\n  /** The contents of the disclosure. The first child should be the header, and the second child should be the panel. */\n  children: React.ReactNode\n}\n\nfunction Disclosure(props: SpectrumDisclosureProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <RACDisclosure\n      {...props}\n      ref={domRef}\n      className={({isExpanded, isDisabled}) => classNames(styles, 'spectrum-Accordion-item', {\n        'is-expanded': isExpanded,\n        'is-disabled': isDisabled\n      })}>\n      {props.children}\n    </RACDisclosure>\n  );\n}\n\nexport interface SpectrumDisclosurePanelProps extends Omit<DisclosurePanelProps, 'className' | 'style' | 'children'>, DOMProps, AriaLabelingProps {\n  /** The contents of the accordion panel. */\n  children: React.ReactNode\n}\n\nfunction DisclosurePanel(props: SpectrumDisclosurePanelProps, ref: DOMRef<HTMLDivElement>) {\n  let domRef = useDOMRef(ref);\n  return (\n    <RACDisclosurePanel ref={domRef} className={classNames(styles, 'spectrum-Accordion-itemContent')} {...props}>\n      {props.children}\n    </RACDisclosurePanel>\n  );\n}\n\nexport interface SpectrumDisclosureHeaderProps extends DOMProps, AriaLabelingProps {\n  /**\n   * The heading level of the disclosure header.\n   * @default 3\n   */\n  level?: number,\n  /** The contents of the disclosure header. */\n  children: React.ReactNode\n}\n\nfunction DisclosureHeader(props: SpectrumDisclosureHeaderProps, ref: DOMRef<HTMLHeadingElement>) {\n  let {level = 3} = props;\n  let {direction} = useLocale();\n  let domRef = useDOMRef(ref);\n  return (\n    <Heading ref={domRef} level={level} className={classNames(styles, 'spectrum-Accordion-itemHeading')}>\n      <Button\n        slot=\"trigger\"\n        className={({isHovered, isFocusVisible}) => classNames(styles, 'spectrum-Accordion-itemHeader', {\n          'is-hovered': isHovered,\n          'focus-ring': isFocusVisible\n        })}>\n        {direction === 'ltr' ? (\n          <ChevronRightMedium\n            aria-hidden=\"true\"\n            UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              ) : (\n                <ChevronLeftMedium\n                  aria-hidden=\"true\"\n                  UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              )}\n        {props.children}\n      </Button>\n    </Heading>\n  );\n}\n\n/** A group of disclosures that can be expanded and collapsed. */\nconst _Accordion = forwardRef(Accordion) as (props: SpectrumAccordionProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof Accordion>;\nexport {_Accordion as Accordion};\n\n/** A collapsible section of content composed of a heading that expands and collapses a panel. */\nconst _Disclosure = forwardRef(Disclosure) as (props: SpectrumDisclosureProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof Disclosure>;\nexport {_Disclosure as Disclosure};\n\n/** The panel that contains the content of an disclosure. */\nconst _DisclosurePanel = forwardRef(DisclosurePanel) as (props: SpectrumDisclosurePanelProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof DisclosurePanel>;\nexport {_DisclosurePanel as DisclosurePanel};\n\n/** The heading of the disclosure. */\nconst _DisclosureHeader = forwardRef(DisclosureHeader) as (props: SpectrumDisclosureHeaderProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof DisclosureHeader>;\nexport {_DisclosureHeader as DisclosureHeader};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AACA,IAAA;AATA,4CAA+B;AAC/B,4CAAgC;AAChC,4CAAgC;AAChC,4CAA+B;AAC/B,4CAAuC;AACvC,4CAA4C;AAC5C,4CAAmD;AACnD,4CAAkD;AAClD,4CAAmD;AACnD,4CAAqD;;;;;;;ACkBrD,SAAS,gCAAU,OAA+B,KAA2B;AAC3E,WAAQ,GAAA,2CAAiB,KAAA;AACzB,MAAI,EAAA,WAAW,KAAI,GAAA,2CAAc,KAAA;AACjC,MAAI,UAAS,GAAA,2CAAU,GAAA;AACvB,UACE,GAAA,aAAAA,SAAA,eAAC,GAAA,4CAAc;IACZ,GAAG;IACH,GAAG;IACJ,KAAK;IACL,YAAW,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,sBAAsB,WAAW,SAAS;KACvE,MAAM,QAAQ;AAGrB;AAOA,SAAS,iCAAW,OAAgC,KAA2B;AAC7E,WAAQ,GAAA,2CAAiB,KAAA;AACzB,MAAI,UAAS,GAAA,2CAAU,GAAA;AACvB,UACE,GAAA,aAAAA,SAAA,eAAC,GAAA,4CAAY;IACV,GAAG;IACJ,KAAK;IACL,WAAW,CAAC,EAAA,YAAW,WAAY,OAAM,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,2BAA2B;MACrF,eAAe;MACf,eAAe;IACjB,CAAA;KACC,MAAM,QAAQ;AAGrB;AAOA,SAAS,sCAAgB,OAAqC,KAA2B;AACvF,MAAI,UAAS,GAAA,2CAAU,GAAA;AACvB,UACE,GAAA,aAAAA,SAAA,eAAC,GAAA,4CAAiB;IAAE,KAAK;IAAQ,YAAW,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,gCAAA;IAAoC,GAAG;KACnG,MAAM,QAAQ;AAGrB;AAYA,SAAS,uCAAiB,OAAsC,KAA+B;AAC7F,MAAI,EAAA,QAAS,EAAA,IAAK;AAClB,MAAI,EAAA,UAAU,KAAI,GAAA,2CAAQ;AAC1B,MAAI,UAAS,GAAA,2CAAU,GAAA;AACvB,UACE,GAAA,aAAAA,SAAA,eAAC,GAAA,4CAAM;IAAE,KAAK;IAAQ;IAAc,YAAW,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,gCAAA;MAChE,GAAA,aAAAA,SAAA,eAAC,GAAA,4CAAK;IACJ,MAAK;IACL,WAAW,CAAC,EAAA,WAAU,eAAgB,OAAM,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,iCAAiC;MAC9F,cAAc;MACd,cAAc;IAChB,CAAA;KACC,cAAc,SACb,GAAA,aAAAA,SAAA,eAAC,GAAA,qBAAiB;IAChB,eAAY;IACZ,mBAAkB,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,kCAAA;QAEjC,GAAA,aAAAA,SAAA,eAAC,GAAA,oBAAgB;IACf,eAAY;IACZ,mBAAkB,GAAA,4CAAW,GAAA,uBAAA,yBAAA,IAAQ,kCAAA;MAE9C,MAAM,QAAQ,CAAA;AAIvB;AAGA,IAAM,6CAAa,GAAA,aAAAC,YAAW,+BAAA;AAI9B,IAAM,6CAAc,GAAA,aAAAA,YAAW,gCAAA;AAI/B,IAAM,6CAAmB,GAAA,aAAAA,YAAW,qCAAA;AAIpC,IAAM,6CAAoB,GAAA,aAAAA,YAAW,sCAAA;",
  "names": ["$aMy5K$react", "$aMy5K$forwardRef"]
}
