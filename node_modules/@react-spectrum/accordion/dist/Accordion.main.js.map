{"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;AAiBD,SAAS,gCAAU,KAA6B,EAAE,GAA2B;IAC3E,QAAQ,CAAA,GAAA,6CAAe,EAAE;IACzB,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IACjC,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,qBACE,0DAAC,CAAA,GAAA,mDAAc;QACZ,GAAG,KAAK;QACR,GAAG,UAAU;QACd,KAAK;QACL,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG,sBAAsB,WAAW,SAAS;OACvE,MAAM,QAAQ;AAGrB;AAOA,SAAS,iCAAW,KAA8B,EAAE,GAA2B;IAC7E,QAAQ,CAAA,GAAA,6CAAe,EAAE;IACzB,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,qBACE,0DAAC,CAAA,GAAA,8CAAY;QACV,GAAG,KAAK;QACT,KAAK;QACL,WAAW,CAAC,cAAC,UAAU,cAAE,UAAU,EAAC,GAAK,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG,2BAA2B;gBACrF,eAAe;gBACf,eAAe;YACjB;OACC,MAAM,QAAQ;AAGrB;AAOA,SAAS,sCAAgB,KAAmC,EAAE,GAA2B;IACvF,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,qBACE,0DAAC,CAAA,GAAA,mDAAiB;QAAE,KAAK;QAAQ,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QAAoC,GAAG,KAAK;OACxG,MAAM,QAAQ;AAGrB;AAYA,SAAS,uCAAiB,KAAoC,EAAE,GAA+B;IAC7F,IAAI,SAAC,QAAQ,GAAE,GAAG;IAClB,IAAI,aAAC,SAAS,EAAC,GAAG,CAAA,GAAA,8BAAQ;IAC1B,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,qBACE,0DAAC,CAAA,GAAA,kCAAM;QAAE,KAAK;QAAQ,OAAO;QAAO,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;qBAChE,0DAAC,CAAA,GAAA,iCAAK;QACJ,MAAK;QACL,WAAW,CAAC,aAAC,SAAS,kBAAE,cAAc,EAAC,GAAK,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG,iCAAiC;gBAC9F,cAAc;gBACd,cAAc;YAChB;OACC,cAAc,sBACb,0DAAC,CAAA,GAAA,kEAAiB;QAChB,eAAY;QACZ,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;uBAEjC,0DAAC,CAAA,GAAA,iEAAgB;QACf,eAAY;QACZ,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QAE9C,MAAM,QAAQ;AAIvB;AAEA,+DAA+D,GAC/D,MAAM,0DAAa,CAAA,GAAA,uBAAS,EAAE;AAG9B,+FAA+F,GAC/F,MAAM,0DAAc,CAAA,GAAA,uBAAS,EAAE;AAG/B,0DAA0D,GAC1D,MAAM,0DAAmB,CAAA,GAAA,uBAAS,EAAE;AAGpC,mCAAmC,GACnC,MAAM,0DAAoB,CAAA,GAAA,uBAAS,EAAE","sources":["packages/@react-spectrum/accordion/src/Accordion.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, StyleProps} from '@react-types/shared';\nimport {Button, UNSTABLE_DisclosureGroup as DisclosureGroup, DisclosureGroupProps, DisclosurePanelProps, DisclosureProps, Heading, UNSTABLE_Disclosure as RACDisclosure, UNSTABLE_DisclosurePanel as RACDisclosurePanel} from 'react-aria-components';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport React, {forwardRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/accordion/vars.css';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nexport interface SpectrumAccordionProps extends Omit<DisclosureGroupProps, 'className' | 'style' | 'children'>, StyleProps, DOMProps {\n  /** The disclosures within the accordion group. */\n  children: React.ReactNode\n}\n\nfunction Accordion(props: SpectrumAccordionProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <DisclosureGroup\n      {...props}\n      {...styleProps}\n      ref={domRef}\n      className={classNames(styles, 'spectrum-Accordion', styleProps.className)}>\n      {props.children}\n    </DisclosureGroup>\n  );\n}\n\nexport interface SpectrumDisclosureProps extends Omit<DisclosureProps, 'className' | 'style' | 'children'>, AriaLabelingProps  {\n  /** The contents of the disclosure. The first child should be the header, and the second child should be the panel. */\n  children: React.ReactNode\n}\n\nfunction Disclosure(props: SpectrumDisclosureProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <RACDisclosure\n      {...props}\n      ref={domRef}\n      className={({isExpanded, isDisabled}) => classNames(styles, 'spectrum-Accordion-item', {\n        'is-expanded': isExpanded,\n        'is-disabled': isDisabled\n      })}>\n      {props.children}\n    </RACDisclosure>\n  );\n}\n\nexport interface SpectrumDisclosurePanelProps extends Omit<DisclosurePanelProps, 'className' | 'style' | 'children'>, DOMProps, AriaLabelingProps {\n  /** The contents of the accordion panel. */\n  children: React.ReactNode\n}\n\nfunction DisclosurePanel(props: SpectrumDisclosurePanelProps, ref: DOMRef<HTMLDivElement>) {\n  let domRef = useDOMRef(ref);\n  return (\n    <RACDisclosurePanel ref={domRef} className={classNames(styles, 'spectrum-Accordion-itemContent')} {...props}>\n      {props.children}\n    </RACDisclosurePanel>\n  );\n}\n\nexport interface SpectrumDisclosureHeaderProps extends DOMProps, AriaLabelingProps {\n  /**\n   * The heading level of the disclosure header.\n   * @default 3\n   */\n  level?: number,\n  /** The contents of the disclosure header. */\n  children: React.ReactNode\n}\n\nfunction DisclosureHeader(props: SpectrumDisclosureHeaderProps, ref: DOMRef<HTMLHeadingElement>) {\n  let {level = 3} = props;\n  let {direction} = useLocale();\n  let domRef = useDOMRef(ref);\n  return (\n    <Heading ref={domRef} level={level} className={classNames(styles, 'spectrum-Accordion-itemHeading')}>\n      <Button\n        slot=\"trigger\"\n        className={({isHovered, isFocusVisible}) => classNames(styles, 'spectrum-Accordion-itemHeader', {\n          'is-hovered': isHovered,\n          'focus-ring': isFocusVisible\n        })}>\n        {direction === 'ltr' ? (\n          <ChevronRightMedium\n            aria-hidden=\"true\"\n            UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              ) : (\n                <ChevronLeftMedium\n                  aria-hidden=\"true\"\n                  UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              )}\n        {props.children}\n      </Button>\n    </Heading>\n  );\n}\n\n/** A group of disclosures that can be expanded and collapsed. */\nconst _Accordion = forwardRef(Accordion) as (props: SpectrumAccordionProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof Accordion>;\nexport {_Accordion as Accordion};\n\n/** A collapsible section of content composed of a heading that expands and collapses a panel. */\nconst _Disclosure = forwardRef(Disclosure) as (props: SpectrumDisclosureProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof Disclosure>;\nexport {_Disclosure as Disclosure};\n\n/** The panel that contains the content of an disclosure. */\nconst _DisclosurePanel = forwardRef(DisclosurePanel) as (props: SpectrumDisclosurePanelProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof DisclosurePanel>;\nexport {_DisclosurePanel as DisclosurePanel};\n\n/** The heading of the disclosure. */\nconst _DisclosureHeader = forwardRef(DisclosureHeader) as (props: SpectrumDisclosureHeaderProps & {ref?: DOMRef<HTMLDivElement>}) => ReturnType<typeof DisclosureHeader>;\nexport {_DisclosureHeader as DisclosureHeader};\n"],"names":[],"version":3,"file":"Accordion.main.js.map"}